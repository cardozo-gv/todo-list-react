{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","_this$props","this","props","item","handleChange","handleSubmit","editItem","react_default","a","createElement","className","onSubmit","type","placeholder","value","onChange","Component","TodoItem","title","handleDelete","handleUpdate","onClick","TodoList","items","handleClean","map","components_TodoItem","key","id","App","state","uuid","e","_this","setState","target","preventDefault","newItem","updatedItems","concat","Object","toConsumableArray","tempItems","filter","i","selectedItem","findItem","find","components_TodoInput","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.977cb336.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoInput extends Component {\n  render(){\n    const { item, handleChange, handleSubmit,editItem } = this.props;\n    return(\n      <div className=\"card card-body my-3\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <div className=\"input-group-text bg-primary text-white\">\n                <i className=\"fas fa-book\"/>\n              </div>\n            </div>\n            <input type=\"text\"\n                   className=\"form-control text-capitalize\"\n                   placeholder=\"add a todo item\"\n                   value={item}\n                   onChange={handleChange}\n            />\n          </div>\n          <button type=\"submit\"\n            className={editItem ? \"btn btn-block btn-success mt-3\" : \"btn btn-block btn-primary mt-3\"}>\n            {editItem ? 'Edit item' : 'add item'}\n          </button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default TodoInput\n","import React, { Component } from 'react';\n\n\nclass TodoItem extends Component{\n  render(){\n    const {title,handleDelete, handleUpdate} = this.props;\n    return(\n      <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\n        <h6>{title}</h6>\n        <div className=\"todo-icon\" >\n          <span className=\"mx-2 text-success\" onClick={handleUpdate}>\n            <i className=\"fas fa-pen\"/>\n          </span>\n          <span className=\"mx-2 text-danger\" onClick={handleDelete}>\n            <i className=\"fas fa-trash\"/>\n          </span>\n        </div>\n      </li>\n    )\n  }\n}\n\nexport default TodoItem\n","import React, { Component } from 'react';\n\nimport TodoItem from './TodoItem';\n\nclass TodoList extends Component{\n  render(){\n    const { items, handleClean, handleDelete, handleUpdate } = this.props;\n    return(\n      <ul className=\"list-group my-5\">\n        <h3 className=\"text-capitalize text-center\">Todo list</h3>\n        {items.map(item => {\n          return <TodoItem\n            key={item.id}\n            title={item.item}\n            handleDelete={()=> handleDelete(item.id)}\n            handleUpdate = {() => handleUpdate(item.id)}\n          />\n        })}\n\n        <button className=\"btn btn-danger btn-block mt-5 text-capitalize\" onClick={handleClean} >clear list</button>\n      </ul>\n    )\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport uuid from 'uuid';\n\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\n\nclass App extends Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: \"\",\n    editItem:false\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      item:e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const newItem = {\n      id: this.state.id,\n      item: this.state.item\n    }\n\n    const updatedItems = [...this.state.items,newItem];\n\n\n    this.setState({\n      items : updatedItems,\n      item : \"\",\n      id : uuid(),\n      editItem : false\n    })\n  }\n\n  handleClean = () =>{\n    this.setState({\n      items:[]\n    })\n  }\n\n  handleDelete = (id) =>{\n    const tempItems = this.state.items.filter( i => i.id !== id);\n    this.setState({\n      items:tempItems\n    });\n  }\n\n  handleUpdate = (id) =>{\n    const tempItems = this.state.items.filter( i => i.id !== id);\n    const selectedItem = this.findItem(id);\n    this.setState({\n      items: tempItems,\n      item: selectedItem.item,\n      id : id,\n      editItem:true\n    })\n\n  }\n\n  findItem = (id) => {\n    return this.state.items.find(i => i.id === id);\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center\">Todo input</h3>\n            <TodoInput\n              item={this.state.item}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editItem = {this.state.editItem}\n            />\n            <TodoList\n              items={this.state.items}\n              handleClean={this.handleClean}\n              handleDelete={this.handleDelete}\n              handleUpdate={this.handleUpdate}\n            />\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}